import java.util.*;

public class Solution {
    private ListNode current;

    public TreeNode sortedListToBST(ListNode head) {
        int size = getLength(head);
        current = head;
        return buildBST(0, size - 1);
    }

    private int getLength(ListNode head) {
        int count = 0;
        while (head != null) {
            head = head.next;
            count++;
        }
        return count;
    }

    private TreeNode buildBST(int left, int right) {
        if (left > right) return null;

        int mid = (left + right) / 2;

        TreeNode leftChild = buildBST(left, mid - 1);

        TreeNode node = new TreeNode(current.val);
        node.left = leftChild;

        current = current.next;

        node.right = buildBST(mid + 1, right);
        return node;
    }

    // Helper method to serialize the tree in level order including nulls
    public List<Integer> serialize(TreeNode root) {
        List<Integer> result = new ArrayList<>();
        if (root == null) return result;

        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);

        while (!queue.isEmpty()) {
            TreeNode node = queue.poll();
            if (node == null) {
                result.add(null);
                continue;
            }
            result.add(node.val);
            queue.offer(node.left);
            queue.offer(node.right);
        }

        // Trim trailing nulls to match usual output format
        int i = result.size() - 1;
        while (i >= 0 && result.get(i) == null) {
            result.remove(i);
            i--;
        }

        return result;
    }

    // Example ListNode and TreeNode classes
    public static class ListNode {
        int val;
        ListNode next;
        ListNode(int val) { this.val = val; }
    }

    public static class TreeNode {
        int val;
        TreeNode left, right;
        TreeNode(int val) { this.val = val; }
    }

    public static void main(String[] args) {
        // Example linked list: -10 -> -3 -> 0 -> 5 -> 9
        ListNode head = new ListNode(-10);
        head.next = new ListNode(-3);
        head.next.next = new ListNode(0);
        head.next.next.next = new ListNode(5);
        head.next.next.next.next = new ListNode(9);

        Solution sol = new Solution();
        TreeNode bstRoot = sol.sortedListToBST(head);

        List<Integer> serialized = sol.serialize(bstRoot);
        System.out.println(serialized);
        // Output: [0, -3, 9, -10, null, 5]
    }
}
