class Solution {
    public String removeKdigits(String num, int k) {
        if (k == num.length()) return "0";

        Deque<Character> stack = new LinkedList<>();

        for (char digit : num.toCharArray()) {
            // While k > 0 and the top of the stack is greater than the current digit,
            // pop from stack to get smaller number
            while (!stack.isEmpty() && k > 0 && stack.peekLast() > digit) {
                stack.pollLast();
                k--;
            }
            stack.addLast(digit);
        }

        // If k still remains, remove from the end
        while (k > 0) {
            stack.pollLast();
            k--;
        }

        // Build the result string, removing leading zeros
        StringBuilder sb = new StringBuilder();
        boolean leadingZero = true;
        for (char digit : stack) {
            if (leadingZero && digit == '0') continue;
            leadingZero = false;
            sb.append(digit);
        }

        // If empty, return "0"
        return sb.length() == 0 ? "0" : sb.toString();
    }
}
