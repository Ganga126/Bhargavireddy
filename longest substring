#include <unordered_map>
#include <string>
using namespace std;

class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        unordered_map<char, int> charIndexMap;
        int maxLength = 0;
        int start = 0;  // Start index of the current window

        for (int end = 0; end < s.length(); ++end) {
            char currentChar = s[end];
            // If the character is found in map and is within the current window
            if (charIndexMap.find(currentChar) != charIndexMap.end() && charIndexMap[currentChar] >= start) {
                start = charIndexMap[currentChar] + 1;  // Move the window
            }

            charIndexMap[currentChar] = end;  // Update the latest index
            maxLength = max(maxLength, end - start + 1);
        }

        return maxLength;
    }
};
